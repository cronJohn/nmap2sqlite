// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: custom.sql

package sqlc

import (
	"context"

	"github.com/rs/zerolog/log"
)

const insertExtraPorts = `-- name: InsertExtraPorts :exec
INSERT INTO extra_ports (
    host_id, state, count
) VALUES (?, ?, ?)
`

type InsertExtraPortsParams struct {
	HostID int64  `json:"host_id"`
	State  string `json:"state"`
	Count  int64  `json:"count"`
}

func (q *Queries) InsertExtraPorts(ctx context.Context, arg InsertExtraPortsParams) (lastID int64, err error) {
	res, err := q.db.ExecContext(ctx, insertExtraPorts, arg.HostID, arg.State, arg.Count)
	if err != nil {
		log.Error().Err(err).Msg("Error inserting extra ports")
	}
	if lastID, err = res.LastInsertId(); err != nil {
		log.Error().Err(err).Msg("Error getting last insert id")
	}
	return lastID, nil
}

const insertHost = `-- name: InsertHost :exec
INSERT INTO hosts (
    scan_id, start_time, end_time, status_state, status_reason, status_reason_ttl,
    distance_value, uptime_seconds, uptime_lastboot,
    tcp_sequence_index, tcp_sequence_difficulty, tcp_sequence_values,
    ip_id_seq_class, ip_id_seq_values,
    tcp_ts_seq_class, tcp_ts_seq_values,
    time_srtt, time_rttvar, time_to
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertHostParams struct {
	ScanID                int64  `json:"scan_id"`
	StartTime             int64  `json:"start_time"`
	EndTime               int64  `json:"end_time"`
	StatusState           string `json:"status_state"`
	StatusReason          string `json:"status_reason"`
	StatusReasonTtl       int64  `json:"status_reason_ttl"`
	DistanceValue         int64  `json:"distance_value"`
	UptimeSeconds         int64  `json:"uptime_seconds"`
	UptimeLastboot        string `json:"uptime_lastboot"`
	TcpSequenceIndex      int64  `json:"tcp_sequence_index"`
	TcpSequenceDifficulty string `json:"tcp_sequence_difficulty"`
	TcpSequenceValues     string `json:"tcp_sequence_values"`
	IpIDSeqClass          string `json:"ip_id_seq_class"`
	IpIDSeqValues         string `json:"ip_id_seq_values"`
	TcpTsSeqClass         string `json:"tcp_ts_seq_class"`
	TcpTsSeqValues        string `json:"tcp_ts_seq_values"`
	TimeSrtt              int64  `json:"time_srtt"`
	TimeRttvar            int64  `json:"time_rttvar"`
	TimeTo                int64  `json:"time_to"`
}

func (q *Queries) InsertHost(ctx context.Context, arg InsertHostParams) (lastID int64, err error) {
	res, err := q.db.ExecContext(ctx, insertHost,
		arg.ScanID,
		arg.StartTime,
		arg.EndTime,
		arg.StatusState,
		arg.StatusReason,
		arg.StatusReasonTtl,
		arg.DistanceValue,
		arg.UptimeSeconds,
		arg.UptimeLastboot,
		arg.TcpSequenceIndex,
		arg.TcpSequenceDifficulty,
		arg.TcpSequenceValues,
		arg.IpIDSeqClass,
		arg.IpIDSeqValues,
		arg.TcpTsSeqClass,
		arg.TcpTsSeqValues,
		arg.TimeSrtt,
		arg.TimeRttvar,
		arg.TimeTo,
	)
	if err != nil {
		log.Error().Err(err).Msg("Error inserting host")
	}
	if lastID, err = res.LastInsertId(); err != nil {
		log.Error().Err(err).Msg("Error getting last insert id")
	}
	return lastID, nil
}

const insertHostScript = `-- name: InsertHostScript :exec
INSERT INTO host_scripts (
    host_id, script_id, script_output
) VALUES (?, ?, ?)
`

type InsertHostScriptParams struct {
	HostID       int64  `json:"host_id"`
	ScriptID     string `json:"script_id"`
	ScriptOutput string `json:"script_output"`
}

func (q *Queries) InsertHostScript(ctx context.Context, arg InsertHostScriptParams) (lastID int64, err error) {
	res, err := q.db.ExecContext(ctx, insertHostScript, arg.HostID, arg.ScriptID, arg.ScriptOutput)
	if err != nil {
		log.Error().Err(err).Msg("Error inserting host script")
	}
	if lastID, err = res.LastInsertId(); err != nil {
		log.Error().Err(err).Msg("Error getting last insert id")
	}
	return lastID, nil
}

const insertHostTrace = `-- name: InsertHostTrace :exec
INSERT INTO host_traces (
    host_id, port, proto
) VALUES (?, ?, ?)
`

type InsertHostTraceParams struct {
	HostID int64  `json:"host_id"`
	Port   int64  `json:"port"`
	Proto  string `json:"proto"`
}

func (q *Queries) InsertHostTrace(ctx context.Context, arg InsertHostTraceParams) (lastID int64, err error) {
	res, err := q.db.ExecContext(ctx, insertHostTrace, arg.HostID, arg.Port, arg.Proto)
	if err != nil {
		log.Error().Err(err).Msg("Error inserting host trace")
	}
	if lastID, err = res.LastInsertId(); err != nil {
		log.Error().Err(err).Msg("Error getting last insert id")
	}
	return lastID, nil
}

const insertNmaprunInfo = `-- name: InsertNmaprunInfo :exec

INSERT INTO scans (
    scanner, args, start, start_str, version, xml_output_version
) VALUES (?, ?, ?, ?, ?, ?)
`

type InsertNmaprunInfoParams struct {
	Scanner          string `json:"scanner"`
	Args             string `json:"args"`
	Start            int64  `json:"start"`
	StartStr         string `json:"start_str"`
	Version          string `json:"version"`
	XmlOutputVersion string `json:"xml_output_version"`
}

func (q *Queries) InsertNmaprunInfo(ctx context.Context, arg InsertNmaprunInfoParams) (lastID int64, err error) {
	res, err := q.db.ExecContext(ctx, insertNmaprunInfo,
		arg.Scanner,
		arg.Args,
		arg.Start,
		arg.StartStr,
		arg.Version,
		arg.XmlOutputVersion,
	)
	if err != nil {
		log.Error().Err(err).Msg("Error inserting nmaprun info")
		return 0, err
	}
	if lastID, err = res.LastInsertId(); err != nil {
		log.Error().Err(err).Msg("Error getting last insert id")
	}
	return lastID, nil
}

const insertOsMatch = `-- name: InsertOsMatch :exec
INSERT INTO os_matches (
    host_id, name, accuracy, line
) VALUES (?, ?, ?, ?)
`

type InsertOsMatchParams struct {
	HostID   int64  `json:"host_id"`
	Name     string `json:"name"`
	Accuracy string `json:"accuracy"`
	Line     string `json:"line"`
}

func (q *Queries) InsertOsMatch(ctx context.Context, arg InsertOsMatchParams) (lastID int64, err error) {
	res, err := q.db.ExecContext(ctx, insertOsMatch,
		arg.HostID,
		arg.Name,
		arg.Accuracy,
		arg.Line,
	)
	if err != nil {
		log.Error().Err(err).Msg("Error inserting os match")
	}
	if lastID, err = res.LastInsertId(); err != nil {
		log.Error().Err(err).Msg("Error getting last insert id")
	}
	return lastID, nil
}

const insertPort = `-- name: InsertPort :exec
INSERT INTO ports (
    host_id, protocol, port_id, 
    state, state_reason, state_reason_ttl, 
    service_name, service_conf, service_method, service_version, service_product, 
    service_extra_info, service_tunnel, service_proto, service_rpc_num, 
    service_lowver, service_highver, service_fp
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertPortParams struct {
	HostID           int64  `json:"host_id"`
	Protocol         string `json:"protocol"`
	PortID           int64  `json:"port_id"`
	State            string `json:"state"`
	StateReason      string `json:"state_reason"`
	StateReasonTtl   int64  `json:"state_reason_ttl"`
	ServiceName      string `json:"service_name"`
	ServiceConf      int64  `json:"service_conf"`
	ServiceMethod    string `json:"service_method"`
	ServiceVersion   string `json:"service_version"`
	ServiceProduct   string `json:"service_product"`
	ServiceExtraInfo string `json:"service_extra_info"`
	ServiceTunnel    string `json:"service_tunnel"`
	ServiceProto     string `json:"service_proto"`
	ServiceRpcNum    string `json:"service_rpc_num"`
	ServiceLowver    string `json:"service_lowver"`
	ServiceHighver   string `json:"service_highver"`
	ServiceFp        string `json:"service_fp"`
}

func (q *Queries) InsertPort(ctx context.Context, arg InsertPortParams) (lastID int64, err error) {
	res, err := q.db.ExecContext(ctx, insertPort,
		arg.HostID,
		arg.Protocol,
		arg.PortID,
		arg.State,
		arg.StateReason,
		arg.StateReasonTtl,
		arg.ServiceName,
		arg.ServiceConf,
		arg.ServiceMethod,
		arg.ServiceVersion,
		arg.ServiceProduct,
		arg.ServiceExtraInfo,
		arg.ServiceTunnel,
		arg.ServiceProto,
		arg.ServiceRpcNum,
		arg.ServiceLowver,
		arg.ServiceHighver,
		arg.ServiceFp,
	)
	if err != nil {
		log.Error().Err(err).Msg("Error inserting port")
	}
	if lastID, err = res.LastInsertId(); err != nil {
		log.Error().Err(err).Msg("Error getting last insert id")
	}
	return lastID, nil
}

const insertPortScript = `-- name: InsertPortScript :exec
INSERT INTO port_scripts (
    port_id, script_id, script_output
) VALUES (?, ?, ?)
`

type InsertPortScriptParams struct {
	PortID       int64  `json:"port_id"`
	ScriptID     string `json:"script_id"`
	ScriptOutput string `json:"script_output"`
}

func (q *Queries) InsertPortScript(ctx context.Context, arg InsertPortScriptParams) (lastID int64, err error) {
	res, err := q.db.ExecContext(ctx, insertPortScript, arg.PortID, arg.ScriptID, arg.ScriptOutput)
	if err != nil {
		log.Error().Err(err).Msg("Error inserting port script")
	}
	if lastID, err = res.LastInsertId(); err != nil {
		log.Error().Err(err).Msg("Error getting last insert id")
	}
	return lastID, nil
}
