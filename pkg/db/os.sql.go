// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: os.sql

package sqlc

import (
	"context"
)

const insertOsClass = `-- name: InsertOsClass :exec
INSERT INTO os_classes (
    os_match_id, type, vendor, osfamily, osgen, accuracy, cpe
) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type InsertOsClassParams struct {
	OsMatchID int64  `json:"os_match_id"`
	Type      string `json:"type"`
	Vendor    string `json:"vendor"`
	Osfamily  string `json:"osfamily"`
	Osgen     string `json:"osgen"`
	Accuracy  string `json:"accuracy"`
	Cpe       string `json:"cpe"`
}

func (q *Queries) InsertOsClass(ctx context.Context, arg InsertOsClassParams) error {
	_, err := q.db.ExecContext(ctx, insertOsClass,
		arg.OsMatchID,
		arg.Type,
		arg.Vendor,
		arg.Osfamily,
		arg.Osgen,
		arg.Accuracy,
		arg.Cpe,
	)
	return err
}

const insertOsPortsUsed = `-- name: InsertOsPortsUsed :exec
INSERT INTO os_ports_used (
    host_id, state, protocol, port_id
) VALUES (?, ?, ?, ?)
`

type InsertOsPortsUsedParams struct {
	HostID   int64  `json:"host_id"`
	State    string `json:"state"`
	Protocol string `json:"protocol"`
	PortID   int64  `json:"port_id"`
}

func (q *Queries) InsertOsPortsUsed(ctx context.Context, arg InsertOsPortsUsedParams) error {
	_, err := q.db.ExecContext(ctx, insertOsPortsUsed,
		arg.HostID,
		arg.State,
		arg.Protocol,
		arg.PortID,
	)
	return err
}
